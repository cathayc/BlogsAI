name: Build BlogsAI for Windows

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: pip-windows-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4 openai sqlalchemy pydantic pyyaml click jinja2 python-dateutil selenium python-dotenv markdown webdriver-manager reportlab keyring platformdirs pytz
        pip install pyinstaller
        # Install PyQt5 with specific Windows handling
        pip install PyQt5==5.15.10 PyQt5-Qt5==5.15.2 PyQt5-sip==12.13.0
        # Install the current package in editable mode to fix import paths
        pip install -e .
    
    - name: Verify build environment
      run: |
        Write-Host "Python version:"
        python --version
        Write-Host "PyInstaller version:"
        pyinstaller --version
        Write-Host "PyQt5 installation:"
        python -c "import PyQt5; print('SUCCESS: PyQt5 imported successfully')"
        if ($LASTEXITCODE -ne 0) { Write-Host "ERROR: PyQt5 import failed" }
        Write-Host "BlogsAI package installation:"
        python -c "import blogsai; print('SUCCESS: blogsai package imported successfully')"
        if ($LASTEXITCODE -ne 0) { Write-Host "ERROR: blogsai package import failed" }
        Write-Host "Testing specific module imports (non-critical):"
        python -c "try: import blogsai.scrapers.government; print('SUCCESS: blogsai.scrapers.government imported successfully'); except Exception as e: print(f'WARNING: blogsai.scrapers.government import issue: {e}')"
        Write-Host "Checking Python syntax compilation:"
        python -m py_compile blogsai/scrapers/government.py
        if ($LASTEXITCODE -ne 0) { Write-Host "WARNING: Syntax issues detected but build will continue" }
        Write-Host "Current directory contents:"
        Get-ChildItem
        Write-Host "Checking required files:"
        if (Test-Path "standalone_app_new.py") { Write-Host "SUCCESS: standalone_app_new.py found" } else { Write-Host "ERROR: standalone_app_new.py missing" }
        if (Test-Path "build.py") { Write-Host "SUCCESS: build.py found" } else { Write-Host "ERROR: build.py missing" }
        if (Test-Path "assets") { Write-Host "SUCCESS: assets directory found" } else { Write-Host "ERROR: assets directory missing" }
        if (Test-Path "blogsai") { Write-Host "SUCCESS: blogsai package found" } else { Write-Host "ERROR: blogsai package missing" }
      shell: pwsh
    
    - name: Build Windows executable
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        python build.py
    
    - name: Verify build output
      run: |
        Write-Host "Build completed. Checking output:"
        if (Test-Path "dist") { Write-Host "SUCCESS: dist directory created" } else { Write-Host "ERROR: dist directory missing" }
        Get-ChildItem dist
        if (Test-Path "dist/BlogsAI-Windows.zip") { Write-Host "SUCCESS: Windows ZIP created" } else { Write-Host "ERROR: Windows ZIP missing" }
      shell: pwsh
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: BlogsAI-Windows
        path: |
          dist/BlogsAI-Windows.zip
        retention-days: 30
        if-no-files-found: error
    
    - name: Create Release (on main branch)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: windows-v${{ github.run_number }}
        name: BlogsAI Windows Build v${{ github.run_number }}
        body: |
          ## BlogsAI Windows Desktop Application
          
          Automated Windows build from commit ${{ github.sha }}
          
          ### Download
          - **BlogsAI-Windows.zip** - Extract and run BlogsAI.exe
          
          ### Installation
          1. Download BlogsAI-Windows.zip
          2. Extract the archive to your desired location
          3. Run BlogsAI.exe
          
          ### System Requirements
          - Windows 10 or later
          - No additional installation required
          
          ### First Run
          - The app will prompt for OpenAI API key setup
          - All data is stored in Windows user directories
        files: |
          dist/BlogsAI-Windows.zip
        draft: false
        prerelease: false
